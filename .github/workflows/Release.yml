name: Production app workflow

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - 'release/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checking out branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          validate-wrappers: true
          gradle-home-cache-cleanup: true

      - name: Set version code/name
        env:
          CI_SOURCEBRANCHNAME: ${{ github.ref_name }}
          CI_SOURCEVERSION: ${{ github.sha }}
          CI_BUILDID: ${{ github.run_id }}
          CI_PULLREQUESTNUMBER: ${{ github.event.number }}
        run: scripts/version_code.sh

      # This will decode the keystore from base 64 text representation that we have stored in secrets
      # and generates and keystore file and gets stored in /android-app path
      - name: Decode Keystore
        env:
          ENCODED_STRING: ${{ secrets.KEYSTORE_BASE_64 }}

        run: |
          mkdir -p signing
          echo "$ENCODED_STRING" | base64 --decode > signing/Clausr.keystore

      - name: Insert sentry properties
        env:
          ENCODED_SENTRY_PROPERTIES: ${{ secrets.SENTRY_PROPERTIES_BASE64 }}

        run: |
          echo "$ENCODED_SENTRY_PROPERTIES" | base64 --decode > sentry.properties


      - name: Build Release bundle
        env:
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          GOOGLE_PLAY_SIGNING_KEY_ALIAS: ${{ secrets.GOOGLE_PLAY_SIGNING_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        run: ./gradlew bundleProdRelease --stacktrace

      - name: Upload Release Build to Artifacts
        if: github.ref_type == 'tag'
        uses: actions/upload-artifact@v4
        with:
          name: oag-prod-aab
          path: |
            **/prodRelease/*.aab

      - name: Upload Symbols mapping
        if: github.ref_type == 'tag'
        uses: actions/upload-artifact@v4
        with:
          name: oag-prod-mapping
          path: |
            **/prodRelease/mapping.txt

  google_play_upload:
    if: github.ref_type == 'tag'
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: oag-prod-aab

      - name: Download obfuscation mappings
        uses: actions/download-artifact@v4
        with:
          name: oag-prod-mapping

      - name: Upload Android Release to Play Store
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: dk.clausr.a1001albumsgenerator
          releaseFiles: app/build/outputs/bundle/prodRelease/app-prod-release.aab
          track: internal
          mappingFile: app/build/outputs/mapping/prodRelease/mapping.txt